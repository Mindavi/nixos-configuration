diff --git a/src/libutil/util.cc b/src/libutil/util.cc
index 623b74bdd..fe42be487 100644
--- a/src/libutil/util.cc
+++ b/src/libutil/util.cc
@@ -813,23 +813,50 @@ void AutoDelete::reset(const Path & p, bool recursive) {
 
 //////////////////////////////////////////////////////////////////////
 
+std::string getFilename(int fd) {
+  if (fd == -1)
+    return "<none>";
+  std::array<char, 256> buf{};
+  std::string path = "/proc/self/fd/" + std::to_string(fd);
+  if (readlink(path.c_str(), buf.data(), buf.size() - 1) < 0)
+    return "<unknown>";
+  std::string fdPath{buf.data(), strnlen(buf.data(), buf.size())};
+  return fdPath;
+}
 
 AutoCloseFD::AutoCloseFD() : fd{-1} {}
 
 
-AutoCloseFD::AutoCloseFD(int fd) : fd{fd} {}
+AutoCloseFD::AutoCloseFD(int fd) : fd{fd} {
+  //if (fd != -1)
+  //  printInfo("AutoCloseFD created: %1% (%2%)", fd, getFilename(fd));
+}
 
 
 AutoCloseFD::AutoCloseFD(AutoCloseFD && that) : fd{that.fd}
 {
     that.fd = -1;
+    printInfo("AutoCloseFD created (move constructor): %1%", fd);
 }
 
 
 AutoCloseFD & AutoCloseFD::operator =(AutoCloseFD && that)
 {
+    auto thisFilename = getFilename(this->fd);
+    auto thatFilename = getFilename(that.fd);
+    int thatFd = that.fd;
+    if (fd != -1)
+    {
+      bool sameFd = (fd == thatFd);
+      if (sameFd)
+        printInfo("AutoCloseFD: duplicate FDs: %1% (%2%)", fd, thisFilename);
+      //assert(!sameFd);
+    }
+    that.fd = -1;
+    if (this->fd != -1 || thatFd != -1)
+      printInfo("AutoCloseFD created (copy constructor): this: %1% (%3%), that: %2% (%4%)", fd, thatFd, thisFilename, thatFilename);
     close();
-    fd = that.fd;
+    fd = thatFd;
     that.fd = -1;
     return *this;
 }
@@ -854,9 +880,13 @@ int AutoCloseFD::get() const
 void AutoCloseFD::close()
 {
     if (fd != -1) {
-        if (::close(fd) == -1)
+        auto filename = getFilename(fd);
+        if (::close(fd) == -1) {
+            int prevFd = fd;
+            fd = -1;
             /* This should never happen. */
-            throw SysError("closing file descriptor %1%", fd);
+            throw SysError("closing file descriptor %1% (%2%)", prevFd, filename);
+        }
         fd = -1;
     }
 }
